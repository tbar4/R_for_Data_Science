<!DOCTYPE html>
<!-- saved from url=(0054)http://127.0.0.1:3283/Chapter_3_R_for_Data_Science.Rmd -->
<html class=""><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

  
  <script type="application/shiny-singletons"></script>
  <script type="application/html-dependencies">json2[2014.02.04];jquery[1.12.4];shiny[1.0.5]</script>
<script src="./Chapter_3_R_for_Data_Science_files/json2-min.js"></script>
<script src="./Chapter_3_R_for_Data_Science_files/jquery.min.js"></script><style></style>
<link href="./Chapter_3_R_for_Data_Science_files/shiny.css" rel="stylesheet">
<script src="./Chapter_3_R_for_Data_Science_files/shiny.min.js"></script>  <script src="./Chapter_3_R_for_Data_Science_files/rmd_loader.js"></script>
  <link href="./Chapter_3_R_for_Data_Science_files/rmd_loader.css" rel="stylesheet">

<meta name="viewport" content="width=device-width, initial-scale=1"><link rel="stylesheet" type="text/css" href="./Chapter_3_R_for_Data_Science_files/bootstrap.min.css"><script src="./Chapter_3_R_for_Data_Science_files/bootstrap.min.js"></script><script src="./Chapter_3_R_for_Data_Science_files/html5shiv.min.js"></script><script src="./Chapter_3_R_for_Data_Science_files/respond.min.js"></script><script src="./Chapter_3_R_for_Data_Science_files/tabsets.js"></script><link rel="stylesheet" type="text/css" href="./Chapter_3_R_for_Data_Science_files/default.css"><script src="./Chapter_3_R_for_Data_Science_files/highlight.js"></script><link rel="stylesheet" type="text/css" href="./Chapter_3_R_for_Data_Science_files/rmd_perf.css"><script src="./Chapter_3_R_for_Data_Science_files/rmd_perf.js"></script><meta name="rstudio_origin" content="127.0.0.1:10233"><script src="./Chapter_3_R_for_Data_Science_files/rsiframe.js"></script>



<meta name="generator" content="pandoc">


<meta name="author" content="Trevor Barnes">

<meta name="date" content="2017-11-18">

<title>Chapter_3_R_for_Data_Science</title>


<style type="text/css">code{white-space: pre;}</style>
<style type="text/css">
  pre:not([class]) {
    background-color: white;
  }
</style>
<script type="text/javascript">
if (window.hljs) {
  hljs.configure({languages: []});
  hljs.initHighlightingOnLoad();
  if (document.readyState && document.readyState === "complete") {
    window.setTimeout(function() { hljs.initHighlightingOnLoad(); }, 0);
  }
}
</script>



<style type="text/css">
h1 {
  font-size: 34px;
}
h1.title {
  font-size: 38px;
}
h2 {
  font-size: 30px;
}
h3 {
  font-size: 24px;
}
h4 {
  font-size: 18px;
}
h5 {
  font-size: 16px;
}
h6 {
  font-size: 12px;
}
.table th:not([align]) {
  text-align: left;
}
</style>


<script type="text/javascript" src="./Chapter_3_R_for_Data_Science_files/MathJax.js"></script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 5px 0px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 5px; -webkit-border-radius: 5px; -moz-border-radius: 5px; -khtml-border-radius: 5px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 1px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: .7em}
.MathJax_MenuRadioCheck.RTL {right: .7em; left: auto}
.MathJax_MenuLabel {padding: 1px 2em 3px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #DDDDDD; margin: 4px 3px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: #606872; color: white}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important; -webkit-touch-callout: none; -webkit-user-select: none; -khtml-user-select: none; -moz-user-select: none; -ms-user-select: none; user-select: none}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1em; bottom: 1.5em; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head>

<body><div id="MathJax_Message" style="display: none;"></div>
  <div>
    <div data-display-if="!output.__reactivedoc__" data-ns-prefix="" style="display: none;">
      <div id="rmd_loader_wrapper">
        <div id="rmd_loader" style="">
          <img src="./Chapter_3_R_for_Data_Science_files/rmd_loader.gif">
          <p>Loading</p>
        </div>
      </div>
    </div>
    <div id="__reactivedoc__" class="shiny-html-output shiny-bound-output">







<style type="text/css">
.main-container {
  max-width: 940px;
  margin-left: auto;
  margin-right: auto;
}
code {
  color: inherit;
  background-color: rgba(0, 0, 0, 0.04);
}
img {
  max-width:100%;
  height: auto;
}
.tabbed-pane {
  padding-top: 12px;
}
button.code-folding-btn:focus {
  outline: none;
}
</style>



<div class="container-fluid main-container">

<!-- tabsets -->
<script>
$(document).ready(function () {
  window.buildTabsets("section-TOC");
});
</script>

<!-- code folding -->






<div class="fluid-row" id="section-header">



<h1 class="title toc-ignore">Chapter_3_R_for_Data_Science</h1>
<h4 class="author"><em>Trevor Barnes</em></h4>
<h4 class="date"><em>11/18/2017</em></h4>

</div>


<div id="section-chapter-3---data-transformation-with-dplyr" class="section level1">
<h1>Chapter 3 - Data Transformation with dplyr</h1>
<div id="section-nycflights13---be-sure-that-you-have-run-install.packagesnycflights13" class="section level2">
<h2>nycflights13 - be sure that you have run install.packages(nycflights13)</h2>
<pre><code>## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
</div>
<div id="section-filter-rows-with-filter" class="section level2">
<h2>Filter Rows with filter()</h2>
<pre class="r"><code>## Filter for month and day being 1,1

filter(flights, month ==1, day ==1)</code></pre>
<pre><code>## # A tibble: 842 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 832 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>## Practice setting variables to the filters

Jan1 &lt;- filter(flights, month == 1, day == 1)
(Dec25 &lt;- filter(flights, month == 12, day == 25))</code></pre>
<pre><code>## # A tibble: 719 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013    12    25      456            500        -4      649
##  2  2013    12    25      524            515         9      805
##  3  2013    12    25      542            540         2      832
##  4  2013    12    25      546            550        -4     1022
##  5  2013    12    25      556            600        -4      730
##  6  2013    12    25      557            600        -3      743
##  7  2013    12    25      557            600        -3      818
##  8  2013    12    25      559            600        -1      855
##  9  2013    12    25      559            600        -1      849
## 10  2013    12    25      600            600         0      850
## # ... with 709 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>## Be sure to use the '==' and not just '='. See how the following results in an error

filter(flights, month = 1)</code></pre>
<pre><code>## Error: `month` (`month = 1`) must not be named, do you need `==`?</code></pre>
<pre class="r"><code>## Another error you may receive happens with floating point numbers

sqrt(2) ^ 2 == 2</code></pre>
<pre><code>## [1] FALSE</code></pre>
<pre class="r"><code>1/49 * 49 == 1</code></pre>
<pre><code>## [1] FALSE</code></pre>
<pre class="r"><code>## Try using the near function in these instances

near(sqrt(2)^2, 2)</code></pre>
<pre><code>## [1] TRUE</code></pre>
<pre class="r"><code>near(1/49*49, 1)</code></pre>
<pre><code>## [1] TRUE</code></pre>
</div>
<div id="section-logical-operators---is-and---is-or---is-not" class="section level2">
<h2>Logical Operators - &amp; is ‘and’ - | is ‘or’ - ! is ‘not’</h2>
<pre class="r"><code>## Filter flights for Nov or Dec

filter(flights, month == 11 | month == 12)</code></pre>
<pre><code>## # A tibble: 55,403 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013    11     1        5           2359         6      352
##  2  2013    11     1       35           2250       105      123
##  3  2013    11     1      455            500        -5      641
##  4  2013    11     1      539            545        -6      856
##  5  2013    11     1      542            545        -3      831
##  6  2013    11     1      549            600       -11      912
##  7  2013    11     1      550            600       -10      705
##  8  2013    11     1      554            600        -6      659
##  9  2013    11     1      554            600        -6      826
## 10  2013    11     1      554            600        -6      749
## # ... with 55,393 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>## Retyping the same field over and over can be tedious
## Try using the 'x %in% y' which will select every row where x is the value of y

nov_dec &lt;- filter(flights, month %in% c(11,12))

## De Morgan's law states that !(x &amp; y) is the same as !x | !y
## Also, that !(x | y) is the same as !x &amp; !y
## The following formula can be written two different ways to find flights that were not delayed on departure or arrival by more than two hours

filter(flights, !(arr_delay &gt; 120 | dep_delay &gt; 120))</code></pre>
<pre><code>## # A tibble: 316,050 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 316,040 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>filter(flights, arr_delay &lt;= 120, dep_delay &lt;= 120)</code></pre>
<pre><code>## # A tibble: 316,050 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 316,040 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
</div>
<div id="section-missing-values" class="section level2">
<h2>Missing Values</h2>
<pre class="r"><code>## Missing Values (NA) can be an issue in R, they represent unknown value so they become contagious, infecting the function resulting in an unknown output

NA &gt; 5</code></pre>
<pre><code>## [1] NA</code></pre>
<pre class="r"><code>10 == NA</code></pre>
<pre><code>## [1] NA</code></pre>
<pre class="r"><code>NA + 10</code></pre>
<pre><code>## [1] NA</code></pre>
<pre class="r"><code>NA / 2</code></pre>
<pre><code>## [1] NA</code></pre>
<pre class="r"><code>## The most confusing being

NA == NA</code></pre>
<pre><code>## [1] NA</code></pre>
<pre class="r"><code>## To reduce confusion, lets pretend x is Mary's age and y is John's age and we don't know how old they are

x &lt;- NA

y &lt;- NA

x == y</code></pre>
<pre><code>## [1] NA</code></pre>
<pre class="r"><code>## If you want to verify if a value is missing, use the 'is.na' function

is.na(x)</code></pre>
<pre><code>## [1] TRUE</code></pre>
<pre class="r"><code>## Filter only includes rows where the condition is TRUE, it excldes both FALSE and NA

df &lt;- tibble(x = c(1, NA, 3))

filter(df, x &gt; 1)</code></pre>
<pre><code>## # A tibble: 1 x 1
##       x
##   &lt;dbl&gt;
## 1     3</code></pre>
<pre class="r"><code>filter(df, is.na(x) | x &gt; 1)</code></pre>
<pre><code>## # A tibble: 2 x 1
##       x
##   &lt;dbl&gt;
## 1    NA
## 2     3</code></pre>
</div>
<div id="section-arrange-rows-with-arrange" class="section level2">
<h2>Arrange Rows with arrange()</h2>
<pre class="r"><code>## Example

arrange(flights, year, month, day)</code></pre>
<pre><code>## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>## You can use 'desc()' to sort a column in descending order

arrange(flights, desc(arr_delay))</code></pre>
<pre><code>## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     9      641            900      1301     1242
##  2  2013     6    15     1432           1935      1137     1607
##  3  2013     1    10     1121           1635      1126     1239
##  4  2013     9    20     1139           1845      1014     1457
##  5  2013     7    22      845           1600      1005     1044
##  6  2013     4    10     1100           1900       960     1342
##  7  2013     3    17     2321            810       911      135
##  8  2013     7    22     2257            759       898      121
##  9  2013    12     5      756           1700       896     1058
## 10  2013     5     3     1133           2055       878     1250
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>## Missing values are always sorted at the end

df &lt;- tibble(x = c(5,2,NA))

arrange(df, x)</code></pre>
<pre><code>## # A tibble: 3 x 1
##       x
##   &lt;dbl&gt;
## 1     2
## 2     5
## 3    NA</code></pre>
<pre class="r"><code>arrange(df, desc(x))</code></pre>
<pre><code>## # A tibble: 3 x 1
##       x
##   &lt;dbl&gt;
## 1     5
## 2     2
## 3    NA</code></pre>
</div>
<div id="section-select-columns-with-select" class="section level2">
<h2>Select Columns with select()</h2>
<pre class="r"><code>## This is very useful when working with many columns

select(flights, year, month, day)</code></pre>
<pre><code>## # A tibble: 336,776 x 3
##     year month   day
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;
##  1  2013     1     1
##  2  2013     1     1
##  3  2013     1     1
##  4  2013     1     1
##  5  2013     1     1
##  6  2013     1     1
##  7  2013     1     1
##  8  2013     1     1
##  9  2013     1     1
## 10  2013     1     1
## # ... with 336,766 more rows</code></pre>
<pre class="r"><code>## Select all columns between two columns

select(flights, year:day)</code></pre>
<pre><code>## # A tibble: 336,776 x 3
##     year month   day
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;
##  1  2013     1     1
##  2  2013     1     1
##  3  2013     1     1
##  4  2013     1     1
##  5  2013     1     1
##  6  2013     1     1
##  7  2013     1     1
##  8  2013     1     1
##  9  2013     1     1
## 10  2013     1     1
## # ... with 336,766 more rows</code></pre>
<pre class="r"><code>## Select all columns except from between those columns

select(flights, - (year:day))</code></pre>
<pre><code>## # A tibble: 336,776 x 16
##    dep_time sched_dep_time dep_delay arr_time sched_arr_time arr_delay
##       &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;
##  1      517            515         2      830            819        11
##  2      533            529         4      850            830        20
##  3      542            540         2      923            850        33
##  4      544            545        -1     1004           1022       -18
##  5      554            600        -6      812            837       -25
##  6      554            558        -4      740            728        12
##  7      555            600        -5      913            854        19
##  8      557            600        -3      709            723       -14
##  9      557            600        -3      838            846        -8
## 10      558            600        -2      753            745         8
## # ... with 336,766 more rows, and 10 more variables: carrier &lt;chr&gt;,
## #   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;,
## #   distance &lt;dbl&gt;, hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>## Some other helpful select 
## starts_with("abc")
## ends_with("xyz")
## contains("ijk")
## matches("(.)\\1")
## num_range("x", 1:3) ## matches x1, x2, x3
## see ?select for more details

## select can also be used to rename variables, as 'rename()' is a version of select

rename(flights, tail_num = tailnum)</code></pre>
<pre><code>## # A tibble: 336,776 x 19
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      544            545        -1     1004
##  5  2013     1     1      554            600        -6      812
##  6  2013     1     1      554            558        -4      740
##  7  2013     1     1      555            600        -5      913
##  8  2013     1     1      557            600        -3      709
##  9  2013     1     1      557            600        -3      838
## 10  2013     1     1      558            600        -2      753
## # ... with 336,766 more rows, and 12 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tail_num &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;</code></pre>
<pre class="r"><code>## Another option is to use 'select()' in conjunction with the 'everything()'hepler and is useful if you have variables you want to move at the start of the data frame

select(flights, time_hour, air_time, everything())</code></pre>
<pre><code>## # A tibble: 336,776 x 19
##              time_hour air_time  year month   day dep_time sched_dep_time
##                 &lt;dttm&gt;    &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;
##  1 2013-01-01 05:00:00      227  2013     1     1      517            515
##  2 2013-01-01 05:00:00      227  2013     1     1      533            529
##  3 2013-01-01 05:00:00      160  2013     1     1      542            540
##  4 2013-01-01 05:00:00      183  2013     1     1      544            545
##  5 2013-01-01 06:00:00      116  2013     1     1      554            600
##  6 2013-01-01 05:00:00      150  2013     1     1      554            558
##  7 2013-01-01 06:00:00      158  2013     1     1      555            600
##  8 2013-01-01 06:00:00       53  2013     1     1      557            600
##  9 2013-01-01 06:00:00      140  2013     1     1      557            600
## 10 2013-01-01 06:00:00      138  2013     1     1      558            600
## # ... with 336,766 more rows, and 12 more variables: dep_delay &lt;dbl&gt;,
## #   arr_time &lt;int&gt;, sched_arr_time &lt;int&gt;, arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;,
## #   flight &lt;int&gt;, tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, distance &lt;dbl&gt;,
## #   hour &lt;dbl&gt;, minute &lt;dbl&gt;</code></pre>
</div>
<div id="section-add-new-variables-with-mutate" class="section level2">
<h2>Add new variables with mutate()</h2>
<pre class="r"><code>## Mutations work by adding new columns at the end of your dataset, it may be easier to first narrow down your dataset

flights_sml &lt;- select(flights, 
                      year:day,
                      ends_with("delay"),
                      distance,
                      air_time
                      )

mutate(flights_sml,
       gain = arr_delay - dep_delay,
       speed = distance / air_time * 60)</code></pre>
<pre><code>## # A tibble: 336,776 x 9
##     year month   day dep_delay arr_delay distance air_time  gain    speed
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;    &lt;dbl&gt;
##  1  2013     1     1         2        11     1400      227     9 370.0441
##  2  2013     1     1         4        20     1416      227    16 374.2731
##  3  2013     1     1         2        33     1089      160    31 408.3750
##  4  2013     1     1        -1       -18     1576      183   -17 516.7213
##  5  2013     1     1        -6       -25      762      116   -19 394.1379
##  6  2013     1     1        -4        12      719      150    16 287.6000
##  7  2013     1     1        -5        19     1065      158    24 404.4304
##  8  2013     1     1        -3       -14      229       53   -11 259.2453
##  9  2013     1     1        -3        -8      944      140    -5 404.5714
## 10  2013     1     1        -2         8      733      138    10 318.6957
## # ... with 336,766 more rows</code></pre>
<pre class="r"><code>## Note that you can refer to columns that you just created

mutate(flights_sml,
       gain = arr_delay - dep_delay,
       hours = air_time / 60,
       gain_per_hour = gain / hours
       )</code></pre>
<pre><code>## # A tibble: 336,776 x 10
##     year month   day dep_delay arr_delay distance air_time  gain     hours
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt; &lt;dbl&gt;     &lt;dbl&gt;
##  1  2013     1     1         2        11     1400      227     9 3.7833333
##  2  2013     1     1         4        20     1416      227    16 3.7833333
##  3  2013     1     1         2        33     1089      160    31 2.6666667
##  4  2013     1     1        -1       -18     1576      183   -17 3.0500000
##  5  2013     1     1        -6       -25      762      116   -19 1.9333333
##  6  2013     1     1        -4        12      719      150    16 2.5000000
##  7  2013     1     1        -5        19     1065      158    24 2.6333333
##  8  2013     1     1        -3       -14      229       53   -11 0.8833333
##  9  2013     1     1        -3        -8      944      140    -5 2.3333333
## 10  2013     1     1        -2         8      733      138    10 2.3000000
## # ... with 336,766 more rows, and 1 more variables: gain_per_hour &lt;dbl&gt;</code></pre>
<pre class="r"><code>## If you only want to keep the new variables than use transmute()

transmute(flights,
          gain = arr_delay - dep_delay,
          hours = air_time / 60,
          gain_per_hour = gain / hours)</code></pre>
<pre><code>## # A tibble: 336,776 x 3
##     gain     hours gain_per_hour
##    &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;
##  1     9 3.7833333      2.378855
##  2    16 3.7833333      4.229075
##  3    31 2.6666667     11.625000
##  4   -17 3.0500000     -5.573770
##  5   -19 1.9333333     -9.827586
##  6    16 2.5000000      6.400000
##  7    24 2.6333333      9.113924
##  8   -11 0.8833333    -12.452830
##  9    -5 2.3333333     -2.142857
## 10    10 2.3000000      4.347826
## # ... with 336,766 more rows</code></pre>
</div>
<div id="section-useful-creation-functions" class="section level2">
<h2>Useful Creation Functions</h2>
<pre class="r"><code>## By now you should be familiar with the +, -, *, /, and ^ arithmatic operators

## But modular arithematic operators are very powerful, too
## '%/%' is integer division and '%%' is remainder

transmute(flights,
          dep_time,
          hour = dep_time %/% 100,
          minute = dep_time %% 100
          )</code></pre>
<pre><code>## # A tibble: 336,776 x 3
##    dep_time  hour minute
##       &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;
##  1      517     5     17
##  2      533     5     33
##  3      542     5     42
##  4      544     5     44
##  5      554     5     54
##  6      554     5     54
##  7      555     5     55
##  8      557     5     57
##  9      557     5     57
## 10      558     5     58
## # ... with 336,766 more rows</code></pre>
<pre class="r"><code>## Use 'log()', 'log2()', and 'log10()' to transform data ranging across multiple magnitudes

## Use 'lead()' and 'lag()' that helps compute running differences

(x &lt;- 1:10)</code></pre>
<pre><code>##  [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
<pre class="r"><code>lag(x)</code></pre>
<pre><code>##  [1] NA  1  2  3  4  5  6  7  8  9</code></pre>
<pre class="r"><code>lead(x)</code></pre>
<pre><code>##  [1]  2  3  4  5  6  7  8  9 10 NA</code></pre>
<pre class="r"><code>## Compute cumulative and rolling aggregates with the different cum- functions
## 'sumsum()', 'cumprod()', 'cummin()', cummax()', 'cummean()'

x</code></pre>
<pre><code>##  [1]  1  2  3  4  5  6  7  8  9 10</code></pre>
<pre class="r"><code>cumsum(x)</code></pre>
<pre><code>##  [1]  1  3  6 10 15 21 28 36 45 55</code></pre>
<pre class="r"><code>cummin(x)</code></pre>
<pre><code>##  [1] 1 1 1 1 1 1 1 1 1 1</code></pre>
<pre class="r"><code>cummean(x)</code></pre>
<pre><code>##  [1] 1.0 1.5 2.0 2.5 3.0 3.5 4.0 4.5 5.0 5.5</code></pre>
<pre class="r"><code>## Logical comparisons include &lt;, &lt;=, &gt;, &gt;=, !=

## Ranking is also another powerful tool in sorting data

y &lt;- c(1, 2, 2, NA, 3, 4)

min_rank(y)</code></pre>
<pre><code>## [1]  1  2  2 NA  4  5</code></pre>
<pre class="r"><code>min_rank(desc(y))</code></pre>
<pre><code>## [1]  5  3  3 NA  2  1</code></pre>
<pre class="r"><code>## If 'min_rank()' doesnt do what you want it to do, look at the variants with these functions
## 'row_number()', 'dense_rank()', 'percent_rank()', 'cume_dist()', 'ntile()'

row_number(y)</code></pre>
<pre><code>## [1]  1  2  3 NA  4  5</code></pre>
<pre class="r"><code>dense_rank(y)</code></pre>
<pre><code>## [1]  1  2  2 NA  3  4</code></pre>
<pre class="r"><code>percent_rank(y)</code></pre>
<pre><code>## [1] 0.00 0.25 0.25   NA 0.75 1.00</code></pre>
<pre class="r"><code>cume_dist(y)</code></pre>
<pre><code>## [1] 0.2 0.6 0.6  NA 0.8 1.0</code></pre>
</div>
<div id="section-grouped-summaries-with-summarize" class="section level2">
<h2>Grouped Summaries with summarize()</h2>
<pre class="r"><code>## This function will help summarize data by collapsing it to a single row

summarize(flights, delay = mean(dep_delay, na.rm = TRUE))</code></pre>
<pre><code>## # A tibble: 1 x 1
##      delay
##      &lt;dbl&gt;
## 1 12.63907</code></pre>
<pre class="r"><code>## Summzarize doesn't become very useful until we pair it with a group by

by_day &lt;- group_by(flights, year, month, day)

summarize(by_day, delay = mean(dep_delay, na.rm = TRUE))</code></pre>
<pre><code>## # A tibble: 365 x 4
## # Groups:   year, month [?]
##     year month   day     delay
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;
##  1  2013     1     1 11.548926
##  2  2013     1     2 13.858824
##  3  2013     1     3 10.987832
##  4  2013     1     4  8.951595
##  5  2013     1     5  5.732218
##  6  2013     1     6  7.148014
##  7  2013     1     7  5.417204
##  8  2013     1     8  2.553073
##  9  2013     1     9  2.276477
## 10  2013     1    10  2.844995
## # ... with 355 more rows</code></pre>
</div>
<div id="section-combining-multiple-operations-with-piping" class="section level2">
<h2>Combining Multiple Operations with Piping</h2>
<pre class="r"><code>## Piping is  avery useful tool for preventing rewriting code over and over within a function, for example, look how we would normally script the following to summarize delays (HNL is an outlier so we remove it)

by_dest &lt;- group_by(flights, dest)

delay &lt;- summarize(by_dest,
                   count = n(),
                   dist = mean(distance, na.rm = TRUE),
                   delay = mean(arr_delay, na.rm = TRUE)
                   )
delay &lt;- filter(delay, count &gt; 20, dest != "HNL")


## Notice above how there are 3 different steps to prepare the data
##    1) Group the flights by destination
##    2) Summarize to compute average distance, average delay, and number of fights
##    3) Filter to remove noisy points around Honolulu, which is twice as far, on average than          the other airports

## Let us view the data in a plot

ggplot(data = delay,
       mapping = aes(x = dist, y = delay)) +
  geom_point(aes(size = count), alpha = 1/3) +
  geom_smooth(se = FALSE)</code></pre>
<pre><code>## `geom_smooth()` using method = 'loess'</code></pre>
<p><img src="./Chapter_3_R_for_Data_Science_files/unnamed-chunk-10-1.png" width="672"></p>
<pre class="r"><code>## Let us try to make the code more effecient by 'piping' it using %&gt;%

delays &lt;- flights %&gt;%
  group_by(dest) %&gt;%
  summarise(
    count = n(),
    dist = mean(distance, na.rm = TRUE),
    delay = mean(arr_delay, na.rm = TRUE)
  ) %&gt;%
  filter(count &gt; 20, dest != "HNL")

## Why do we keep using the 'na.rm = TRUE' argument? Let us take a look at our data without it

flights %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(mean = mean(dep_delay))</code></pre>
<pre><code>## # A tibble: 365 x 4
## # Groups:   year, month [?]
##     year month   day  mean
##    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;
##  1  2013     1     1    NA
##  2  2013     1     2    NA
##  3  2013     1     3    NA
##  4  2013     1     4    NA
##  5  2013     1     5    NA
##  6  2013     1     6    NA
##  7  2013     1     7    NA
##  8  2013     1     8    NA
##  9  2013     1     9    NA
## 10  2013     1    10    NA
## # ... with 355 more rows</code></pre>
<pre class="r"><code>## We get a lot of missing values, lets add back in the 'na.rm = TRUE'

flights %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(mean = mean(dep_delay), na.rm = TRUE)</code></pre>
<pre><code>## # A tibble: 365 x 5
## # Groups:   year, month [?]
##     year month   day  mean na.rm
##    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;lgl&gt;
##  1  2013     1     1    NA  TRUE
##  2  2013     1     2    NA  TRUE
##  3  2013     1     3    NA  TRUE
##  4  2013     1     4    NA  TRUE
##  5  2013     1     5    NA  TRUE
##  6  2013     1     6    NA  TRUE
##  7  2013     1     7    NA  TRUE
##  8  2013     1     8    NA  TRUE
##  9  2013     1     9    NA  TRUE
## 10  2013     1    10    NA  TRUE
## # ... with 355 more rows</code></pre>
<pre class="r"><code>## We can attack this from a different angle and first remove the flights that have been cancelled

not_cancelled &lt;- flights %&gt;%
  filter(!is.na(dep_delay), !is.na(arr_delay))

not_cancelled %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(mean = mean(dep_delay))</code></pre>
<pre><code>## # A tibble: 365 x 4
## # Groups:   year, month [?]
##     year month   day      mean
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;
##  1  2013     1     1 11.435620
##  2  2013     1     2 13.677802
##  3  2013     1     3 10.907778
##  4  2013     1     4  8.965859
##  5  2013     1     5  5.732218
##  6  2013     1     6  7.145959
##  7  2013     1     7  5.417204
##  8  2013     1     8  2.558296
##  9  2013     1     9  2.301232
## 10  2013     1    10  2.844995
## # ... with 355 more rows</code></pre>
</div>
<div id="section-counts" class="section level2">
<h2>Counts</h2>
<pre class="r"><code>## When you are doing data aggregation, it is always good to do a count, 'n()' or count the nonmissing values, '!is.na(x)'. This way you can verify that you are not drawing conclusions based on small amounts of data

delays &lt;- not_cancelled %&gt;%
  group_by(tailnum) %&gt;%
  summarize(
    delay = mean(arr_delay)
  )

ggplot(data = delays, mapping = aes(x = delay)) +
  geom_freqpoly(binwidth = 10)</code></pre>
<p><img src="./Chapter_3_R_for_Data_Science_files/unnamed-chunk-11-1.png" width="672"></p>
<pre class="r"><code>## We can see that there are planes that have ana average delay of 300 minutes (5 hours), but this isn't giving us the whole picture. We can get a better look if we draw a scatterplot

delays &lt;- not_cancelled %&gt;%
  group_by(tailnum) %&gt;%
  summarize(
    delay = mean(arr_delay, na.rm = TRUE),
    n=n()
  )

ggplot(data = delays, mapping = aes(x = n, y = delay)) + 
  geom_point(alpha = 1/10)</code></pre>
<p><img src="./Chapter_3_R_for_Data_Science_files/unnamed-chunk-11-2.png" width="672"></p>
<pre class="r"><code>## It can be helpful to filter out data with very few observations, let us now remove tailnums with less than 25 observations

delays %&gt;%
  filter(n&gt;25) %&gt;%
  ggplot(mapping = aes(x = n, y = delay)) +
    geom_point(alpha = 1/10)</code></pre>
<p><img src="./Chapter_3_R_for_Data_Science_files/unnamed-chunk-11-3.png" width="672"></p>
<pre class="r"><code>## Let us practice with a different set of data, first, convert our data to a tibble so it looks nice

batting &lt;- as.tibble(Lahman::Batting)

batters &lt;- batting %&gt;%
  group_by(playerID) %&gt;%
  summarize(
    ba = sum(H, na.rm = TRUE) / sum(AB, na.rm = TRUE),
    ab = sum(AB, na.rm = TRUE)
  )

batters %&gt;%
  filter(ab &gt; 100) %&gt;%
  ggplot(mapping = aes(x = ab, y = ba)) +
    geom_point() +
    geom_smooth(se = FALSE)</code></pre>
<pre><code>## `geom_smooth()` using method = 'gam'</code></pre>
<p><img src="./Chapter_3_R_for_Data_Science_files/unnamed-chunk-11-4.png" width="672"></p>
<pre class="r"><code>## We can also exaplin some of the outlying data by arranging, in this case, we can explain away people who have extermely high batting averages as people who were lucky, not skilled

batters %&gt;%
  arrange(desc(ba))</code></pre>
<pre><code>## # A tibble: 18,915 x 3
##     playerID    ba    ab
##        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt;
##  1 abramge01     1     1
##  2 banisje01     1     1
##  3 bartocl01     1     1
##  4  bassdo01     1     1
##  5 berrijo01     1     1
##  6 birasst01     1     2
##  7 bruneju01     1     1
##  8 burnscb01     1     1
##  9 cammaer01     1     1
## 10  campsh01     1     1
## # ... with 18,905 more rows</code></pre>
</div>
<div id="section-useful-summary-functions" class="section level2">
<h2>Useful Summary Functions</h2>
<pre class="r"><code>## Measures of Location include the 'mean()' and 'median()' functions, which helps in combining aggregation and subsetting the data

not_cancelled %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(
    ## Average Delay
    avg_delay1 = mean(arr_delay),
    ## Average Positive Delay (Removes 0's)
    avg_delay2 = mean(arr_delay[arr_delay &gt; 0])
  )</code></pre>
<pre><code>## # A tibble: 365 x 5
## # Groups:   year, month [?]
##     year month   day avg_delay1 avg_delay2
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;      &lt;dbl&gt;      &lt;dbl&gt;
##  1  2013     1     1 12.6510229   32.48156
##  2  2013     1     2 12.6928879   32.02991
##  3  2013     1     3  5.7333333   27.66087
##  4  2013     1     4 -1.9328194   28.30976
##  5  2013     1     5 -1.5258020   22.55882
##  6  2013     1     6  4.2364294   24.37270
##  7  2013     1     7 -4.9473118   27.76132
##  8  2013     1     8 -3.2275785   20.78909
##  9  2013     1     9 -0.2642777   25.63415
## 10  2013     1    10 -5.8988159   27.34545
## # ... with 355 more rows</code></pre>
<pre class="r"><code>## Measures of Spread include the 'sd()', 'IQR()', and 'mad()' fucntions and are useful if you have outliers

not_cancelled %&gt;%
  group_by(dest) %&gt;%
  summarize(distance_sd = sd(distance)) %&gt;%
  arrange(desc(distance_sd))</code></pre>
<pre><code>## # A tibble: 104 x 2
##     dest distance_sd
##    &lt;chr&gt;       &lt;dbl&gt;
##  1   EGE   10.542765
##  2   SAN   10.350094
##  3   SFO   10.216017
##  4   HNL   10.004197
##  5   SEA    9.977993
##  6   LAS    9.907786
##  7   PDX    9.873299
##  8   PHX    9.862546
##  9   LAX    9.657195
## 10   IND    9.458066
## # ... with 94 more rows</code></pre>
<pre class="r"><code>## Measures of Rank include the 'min()', 'quantile()', and 'max()' functions

not_cancelled %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(
    first = min(dep_time),
    last = max(dep_time)
  )</code></pre>
<pre><code>## # A tibble: 365 x 5
## # Groups:   year, month [?]
##     year month   day first  last
##    &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt;
##  1  2013     1     1   517  2356
##  2  2013     1     2    42  2354
##  3  2013     1     3    32  2349
##  4  2013     1     4    25  2358
##  5  2013     1     5    14  2357
##  6  2013     1     6    16  2355
##  7  2013     1     7    49  2359
##  8  2013     1     8   454  2351
##  9  2013     1     9     2  2252
## 10  2013     1    10     3  2320
## # ... with 355 more rows</code></pre>
<pre class="r"><code>## Measures of Position include the 'first()', 'ntn()', and 'last()' functions

not_cancelled %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(
    first_dep = first(dep_time),
    last_dep = last(dep_time)
  )</code></pre>
<pre><code>## # A tibble: 365 x 5
## # Groups:   year, month [?]
##     year month   day first_dep last_dep
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;int&gt;    &lt;int&gt;
##  1  2013     1     1       517     2356
##  2  2013     1     2        42     2354
##  3  2013     1     3        32     2349
##  4  2013     1     4        25     2358
##  5  2013     1     5        14     2357
##  6  2013     1     6        16     2355
##  7  2013     1     7        49     2359
##  8  2013     1     8       454     2351
##  9  2013     1     9         2     2252
## 10  2013     1    10         3     2320
## # ... with 355 more rows</code></pre>
<pre class="r"><code>## These functions are complimentary to filtering on ranks. Filtering gives you all variables with each observation in a seperate row

not_cancelled %&gt;%
  group_by(year, month, day) %&gt;%
  mutate(r = min_rank(desc(dep_time))) %&gt;%
  filter(r %in% range(r))</code></pre>
<pre><code>## # A tibble: 770 x 20
## # Groups:   year, month, day [365]
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1     2356           2359        -3      425
##  3  2013     1     2       42           2359        43      518
##  4  2013     1     2     2354           2359        -5      413
##  5  2013     1     3       32           2359        33      504
##  6  2013     1     3     2349           2359       -10      434
##  7  2013     1     4       25           2359        26      505
##  8  2013     1     4     2358           2359        -1      429
##  9  2013     1     4     2358           2359        -1      436
## 10  2013     1     5       14           2359        15      503
## # ... with 760 more rows, and 13 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;, hour &lt;dbl&gt;,
## #   minute &lt;dbl&gt;, time_hour &lt;dttm&gt;, r &lt;int&gt;</code></pre>
<pre class="r"><code>## Counts are useful for taking no arguments, but returning the total count of a group like 'n()', or to count non-missing values use 'is.na()'. To count unique (distinct) values use 'n_distinct()'

not_cancelled %&gt;%
  group_by(dest) %&gt;%
  summarize(carriers = n_distinct(carrier)) %&gt;%
  arrange(desc(carriers))</code></pre>
<pre><code>## # A tibble: 104 x 2
##     dest carriers
##    &lt;chr&gt;    &lt;int&gt;
##  1   ATL        7
##  2   BOS        7
##  3   CLT        7
##  4   ORD        7
##  5   TPA        7
##  6   AUS        6
##  7   DCA        6
##  8   DTW        6
##  9   IAD        6
## 10   MSP        6
## # ... with 94 more rows</code></pre>
<pre class="r"><code>## If you just want a simple count

not_cancelled %&gt;%
  count(dest)</code></pre>
<pre><code>## # A tibble: 104 x 2
##     dest     n
##    &lt;chr&gt; &lt;int&gt;
##  1   ABQ   254
##  2   ACK   264
##  3   ALB   418
##  4   ANC     8
##  5   ATL 16837
##  6   AUS  2411
##  7   AVL   261
##  8   BDL   412
##  9   BGR   358
## 10   BHM   269
## # ... with 94 more rows</code></pre>
<pre class="r"><code>## You can additionally provide a weight variable

not_cancelled %&gt;%
  count(tailnum, wt=distance)</code></pre>
<pre><code>## # A tibble: 4,037 x 2
##    tailnum      n
##      &lt;chr&gt;  &lt;dbl&gt;
##  1  D942DN   3418
##  2  N0EGMQ 239143
##  3  N10156 109664
##  4  N102UW  25722
##  5  N103US  24619
##  6  N104UW  24616
##  7  N10575 139903
##  8  N105UW  23618
##  9  N107US  21677
## 10  N108UW  32070
## # ... with 4,027 more rows</code></pre>
<pre class="r"><code>## Counts and proportions of logical values when used with numeric functions convert True to 1 and False to 0. This makes the 'sum()' and 'mean()' value very useful

not_cancelled %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(n_early = sum(dep_time &lt; 500))</code></pre>
<pre><code>## # A tibble: 365 x 4
## # Groups:   year, month [?]
##     year month   day n_early
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;   &lt;int&gt;
##  1  2013     1     1       0
##  2  2013     1     2       3
##  3  2013     1     3       4
##  4  2013     1     4       3
##  5  2013     1     5       3
##  6  2013     1     6       2
##  7  2013     1     7       2
##  8  2013     1     8       1
##  9  2013     1     9       3
## 10  2013     1    10       3
## # ... with 355 more rows</code></pre>
<pre class="r"><code>## What proportion of flights are delayed by more than an hour

not_cancelled %&gt;%
  group_by(year, month, day) %&gt;%
  summarize(hour_perc = mean(arr_delay &gt; 60))</code></pre>
<pre><code>## # A tibble: 365 x 4
## # Groups:   year, month [?]
##     year month   day  hour_perc
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;      &lt;dbl&gt;
##  1  2013     1     1 0.07220217
##  2  2013     1     2 0.08512931
##  3  2013     1     3 0.05666667
##  4  2013     1     4 0.03964758
##  5  2013     1     5 0.03486750
##  6  2013     1     6 0.04704463
##  7  2013     1     7 0.03333333
##  8  2013     1     8 0.02130045
##  9  2013     1     9 0.02015677
## 10  2013     1    10 0.01829925
## # ... with 355 more rows</code></pre>
<pre class="r"><code>## Grouping by multiple variables can help you easily peel off variables that makes it progressively earlier to roll up a dataset

daily &lt;- group_by(flights, year, month, day)

per_day &lt;- summarize(daily, flights = n())

per_month &lt;- summarize(per_day, flights = sum(flights))

per_year &lt;- summarize(per_month, flights = sum(flights))

## Ungrouping can be helpful, in this case to no longer group flights by date

daily %&gt;%
  ungroup() %&gt;%
  summarize(flights=n())</code></pre>
<pre><code>## # A tibble: 1 x 1
##   flights
##     &lt;int&gt;
## 1  336776</code></pre>
</div>
<div id="section-grouped-mutates" class="section level2">
<h2>Grouped Mutates</h2>
<pre class="r"><code>## Grouping is most useful in ocnjunction with 'summarize()', but you can also do convenient operations with 'mutate()' and 'filter()'

flights_sml %&gt;%
  group_by(year, month, day) %&gt;%
  filter(rank(desc(arr_delay)) &lt; 10)</code></pre>
<pre><code>## # A tibble: 3,306 x 7
## # Groups:   year, month, day [365]
##     year month   day dep_delay arr_delay distance air_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;
##  1  2013     1     1       853       851      184       41
##  2  2013     1     1       290       338     1134      213
##  3  2013     1     1       260       263      266       46
##  4  2013     1     1       157       174      213       60
##  5  2013     1     1       216       222      708      121
##  6  2013     1     1       255       250      589      115
##  7  2013     1     1       285       246     1085      146
##  8  2013     1     1       192       191      199       44
##  9  2013     1     1       379       456     1092      222
## 10  2013     1     2       224       207      550       94
## # ... with 3,296 more rows</code></pre>
<pre class="r"><code>## Filter all groups bigger than a threshold

popular_dests &lt;- flights %&gt;%
  group_by(dest) %&gt;%
  filter(n() &gt; 365)

## Standardize to compute per group metrics

popular_dests %&gt;%
  filter(arr_delay &gt; 0) %&gt;%
  mutate(prop_delay = arr_delay / sum(arr_delay)) %&gt;%
  select(year:dest, dest, arr_delay, prop_delay)</code></pre>
<pre><code>## # A tibble: 131,106 x 15
## # Groups:   dest [77]
##     year month   day dep_time sched_dep_time dep_delay arr_time
##    &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;
##  1  2013     1     1      517            515         2      830
##  2  2013     1     1      533            529         4      850
##  3  2013     1     1      542            540         2      923
##  4  2013     1     1      554            558        -4      740
##  5  2013     1     1      555            600        -5      913
##  6  2013     1     1      558            600        -2      753
##  7  2013     1     1      558            600        -2      924
##  8  2013     1     1      559            600        -1      941
##  9  2013     1     1      600            600         0      837
## 10  2013     1     1      602            605        -3      821
## # ... with 131,096 more rows, and 8 more variables: sched_arr_time &lt;int&gt;,
## #   arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;, tailnum &lt;chr&gt;,
## #   origin &lt;chr&gt;, dest &lt;chr&gt;, prop_delay &lt;dbl&gt;</code></pre>
</div>
</div>




</div>

<script>

// add bootstrap table styles to pandoc tables
function bootstrapStylePandocTables() {
  $('tr.header').parent('thead').parent('table').addClass('table table-condensed');
}
$(document).ready(function () {
  bootstrapStylePandocTables();
});


</script>

<!-- dynamically load mathjax for compatibility with self-contained -->
<script>
  (function () {
    var script = document.createElement("script");
    script.type = "text/javascript";
    script.src  = "mathjax-local/MathJax.js?config=TeX-AMS-MML_HTMLorMML";
    document.getElementsByTagName("head")[0].appendChild(script);
  })();
</script>


</div>
  </div>



</body></html>